{
    "swagger": "2.0",
    "info": {
        "title": "Ecom API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/admin/addcoupon": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new coupon with the specified attributes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coupons"
                ],
                "summary": "Create a new coupon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Coupon details",
                        "name": "coupon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.coupons"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/addimage": {
            "post": {
                "description": "Uploads one or more images for a product and associates them with the product in the database.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Upload product images",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID to associate images with",
                        "name": "product_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "One or more image files to upload",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/addproduct": {
            "post": {
                "description": "Adds a new product to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Add a new product",
                "parameters": [
                    {
                        "description": "Product information",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/brands": {
            "post": {
                "description": "Create a new brand with the specified name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Create a new brand.",
                "parameters": [
                    {
                        "description": "Brand name to be created",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.brands"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created brand",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/cancelcoupon/{coupon_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancels a coupon by marking it as canceled and updating the ending time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coupons"
                ],
                "summary": "Cancel a coupon by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Coupon ID to cancel",
                        "name": "coupon_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/categoryoffers": {
            "post": {
                "description": "Add an offer to a category by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryOffers"
                ],
                "summary": "Add an offer to a category",
                "parameters": [
                    {
                        "description": "Category ID and Percentage for the offer",
                        "name": "categoryid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.categoryoffers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added an offer to a category",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error in adding category offer",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/categoryoffers/{offer_id}": {
            "put": {
                "description": "Cancel an offer by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CategoryOffers"
                ],
                "summary": "Cancel an offer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID to cancel",
                        "name": "offer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully cancelled an offer",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error in cancelling offer",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/dashboard": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Provides an overview of the admin's dashboard data, including recent sales, total sales, and product counts for the last 30 days.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get admin dashboard data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/deleteproduct/{product_id}": {
            "post": {
                "description": "Deletes a product from the database by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID to delete",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/editimage": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing image for a product in the database.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update Product Image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Image ID to update",
                        "name": "image_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New Product Image file to upload",
                        "name": "Files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/editproduct": {
            "put": {
                "description": "Updates an existing product in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update an existing product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product details to update",
                        "name": "productdetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/listcoupons": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all available coupons.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coupons"
                ],
                "summary": "Retrieve a list of coupons",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/salesreport": {
            "get": {
                "description": "Generates a sales report within a specified date range and exports it to an Excel file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Generate Sales Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Starting date in the format YYYY-MM-DD",
                        "name": "startingdate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ending date in the format YYYY-MM-DD",
                        "name": "endingdate",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report generated successfully",
                        "schema": {
                            "type": "html"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/salesreport/pdf": {
            "get": {
                "description": "Allows users to download the sales report PDF file as an attachment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Download Sales Report PDF File",
                "responses": {
                    "200": {
                        "description": "salesreport.pdf",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "File not found\" (when the PDF file is not found)",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error\" (for other errors)",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/salesreport/xlsx": {
            "get": {
                "description": "Allows users to download the sales report Excel file as an attachment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Download Sales Report Excel File",
                "responses": {
                    "200": {
                        "description": "salesreport.xlsx",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "File not found\" (when the Excel file is not found)",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error\" (for other errors)",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/addtowishlist": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Allows the authenticated user to add a product to their wishlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add to Wishlist",
                "operationId": "AddToWishlist",
                "parameters": [
                    {
                        "description": "Product ID",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.datas"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully added to wishlist.",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Invalid input or product error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/applycoupon": {
            "post": {
                "description": "Apply a coupon to the user's cart and calculate discounts based on the coupon type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupons"
                ],
                "summary": "Apply a coupon to the user's cart",
                "parameters": [
                    {
                        "description": "Coupon code to apply to the cart",
                        "name": "couponcode",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ApplyCouponRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon applied successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error in applying the coupon",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/ascendingfilter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of products sorted in ascending order of their prices.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Sort products by ascending price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/brandfilter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of products associated with the specified brand name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Filter products by brand name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brand name to filter by",
                        "name": "brand_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cancelorder/{order_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel an order with a specific order ID for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "summary": "Cancel Order",
                "operationId": "CancelOrderWithId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID to cancel",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/changepassword": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Change the user's password with a new one.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Change Password",
                "parameters": [
                    {
                        "description": "Old and New Passwords",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.userInputs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/checkoutcod": {
            "post": {
                "description": "Process a cash-on-delivery (COD) order and create payment, order, and order items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COD"
                ],
                "summary": "Process a COD order",
                "parameters": [
                    {
                        "description": "Order object with Address_ID",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully placed the order",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error in processing the order",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/createinvoice": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a PDF invoice for a specific order and user, and saves it as \"public/invoice.pdf\".",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Generate a PDF invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order ID for which the invoice should be generated",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "files"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/deletefromcart/:cart_id": {
            "delete": {
                "description": "Delete a product from the user's cart by specifying the cart item ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Delete a product from the user's cart.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cart Item ID",
                        "name": "cart_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted from cart",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/downloadinvoice": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows users to download the previously generated PDF invoice.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoice"
                ],
                "summary": "Download the PDF invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF invoice file for download",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                }
            }
        },
        "/user/listorderdescasc": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of orders for the authenticated user with optional sorting.",
                "produces": [
                    "application/json"
                ],
                "summary": "List Orders with Sorting",
                "operationId": "ListOrdersdescasc",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc or desc)",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/listorders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of orders for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "summary": "List Orders",
                "operationId": "ListOrders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/listorderswithbrand": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of orders for the authenticated user with a specific brand name.",
                "produces": [
                    "application/json"
                ],
                "summary": "List Orders by Brand",
                "operationId": "ListOrdersWithBrand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Partial brand name to filter by",
                        "name": "brandname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/listorderswithcatagory": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of orders for the authenticated user with a specific category name.",
                "produces": [
                    "application/json"
                ],
                "summary": "List Orders by Category",
                "operationId": "ListOrdersWithCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Partial category name to filter by",
                        "name": "categoryname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error while fetching orders",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/listproducts": {
            "get": {
                "description": "Get a paginated list of products including product name, description, stock, price, brand name, and image.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "List Products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number for pagination (1-based)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of products to return per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Invalid page or limit values",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "404": {
                        "description": "No products found",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/listproductsquery": {
            "get": {
                "description": "Get details of a product including its name, price, stock, and description.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get Product Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the product to retrieve details for",
                        "name": "product_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/listwishlist/{page}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the authenticated user's wishlist items.",
                "produces": [
                    "application/json"
                ],
                "summary": "List Wishlist",
                "operationId": "ListWishlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wishlist items",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Database error or no products found in wishlist",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate a user by verifying their username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users login"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User credentials (Username and Password)",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.userDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Log out the currently authenticated user by clearing the JWT token cookie.",
                "tags": [
                    "users login"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/payment/success": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Processes a successful RazorPay payment and creates an order.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "razor pay"
                ],
                "summary": "Process RazorPay Success",
                "operationId": "RazorPaySuccess",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "payment_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Payment Signature",
                        "name": "signature",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Total Amount Paid",
                        "name": "total",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment processed successfully",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error while processing payment",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/razorpay": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Initiates a payment process through Razorpay for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "razor pay"
                ],
                "summary": "Initiate RazorPay Payment",
                "operationId": "RazorPay",
                "responses": {
                    "200": {
                        "description": "RazorPay payment page",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error while initiating RazorPay payment",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "Register a new user with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users login"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username or phone number already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/signup/validate": {
            "post": {
                "description": "Validate the OTP received via email during user registration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users login"
                ],
                "summary": "Validate OTP",
                "parameters": [
                    {
                        "description": "Email and OTP to validate",
                        "name": "validate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.validatdata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account validation successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found or OTP doesn't match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/success": {
            "get": {
                "description": "Displays a success page after payment completion.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "razor pay"
                ],
                "summary": "Payment Success",
                "operationId": "Success",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment success page",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error while displaying success page",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/updateprofile": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the user's profile with new information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Update Profile",
                "parameters": [
                    {
                        "description": "New Profile Information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.inputDatas"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/userdetail": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of the authenticated user including first name, last name, username, email, phone number, and wallet balance.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get User Details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/viewcart": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the list of products in the user's shopping cart.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Retrieve the user's shopping cart items.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cart items and total price",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/wishlist/addtocart": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Adds a product from the user's wishlist to the cart.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add to Cart from Wishlist",
                "operationId": "AddToCartFromWishlist",
                "responses": {
                    "200": {
                        "description": "Products successfully added to the cart",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Database or product error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/wishlist/delete/{wishlist_id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes a product from the user's wishlist.",
                "summary": "Remove from Wishlist",
                "operationId": "RemoveFromWishlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Wishlist item ID",
                        "name": "wishlist_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully removed from wishlist.",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Integer conversion error or failed to find in wishlist",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ApplyCouponRequest": {
            "type": "object",
            "required": [
                "couponcode"
            ],
            "properties": {
                "couponcode": {
                    "type": "string"
                }
            }
        },
        "controllers.brands": {
            "type": "object",
            "properties": {
                "brandName": {
                    "type": "string"
                }
            }
        },
        "controllers.categoryoffers": {
            "type": "object",
            "properties": {
                "categoryid": {
                    "type": "integer"
                },
                "percentage": {
                    "type": "integer"
                }
            }
        },
        "controllers.coupons": {
            "type": "object",
            "properties": {
                "couponcode": {
                    "type": "string"
                },
                "days": {
                    "type": "integer"
                },
                "maxdiscount": {
                    "type": "integer"
                },
                "mindiscount": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "controllers.datas": {
            "type": "object",
            "properties": {
                "productid": {
                    "type": "integer"
                }
            }
        },
        "controllers.inputDatas": {
            "type": "object",
            "properties": {
                "newemail": {
                    "type": "string"
                },
                "newfirstname": {
                    "type": "string"
                },
                "newphone": {
                    "type": "string"
                },
                "newsecondname": {
                    "type": "string"
                },
                "newusername": {
                    "type": "string"
                }
            }
        },
        "controllers.product": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "newdescription": {
                    "type": "string"
                },
                "newname": {
                    "type": "string"
                },
                "newprice": {
                    "type": "integer"
                },
                "newstock": {
                    "type": "integer"
                }
            }
        },
        "controllers.userDetail": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controllers.userInputs": {
            "type": "object",
            "properties": {
                "newpassword": {
                    "type": "string"
                },
                "oldpassword": {
                    "type": "string"
                }
            }
        },
        "controllers.validatdata": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "integer"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "addressid": {
                    "type": "integer"
                },
                "orderid": {
                    "type": "integer"
                },
                "paymentid": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "totalprice": {
                    "type": "integer"
                },
                "userid": {
                    "type": "integer"
                }
            }
        },
        "models.Product": {
            "type": "object"
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdat": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "isblocked": {
                    "type": "boolean"
                },
                "lastname": {
                    "type": "string",
                    "minLength": 3
                },
                "otp": {
                    "type": "integer"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "phonenumber": {
                    "type": "string"
                },
                "referalcode": {
                    "type": "string"
                },
                "userid": {
                    "type": "integer"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "validate": {
                    "type": "boolean"
                },
                "wallet": {
                    "type": "integer"
                }
            }
        }
    }
}